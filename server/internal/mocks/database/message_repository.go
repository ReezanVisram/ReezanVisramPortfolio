// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/database/message_repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/database/message_repository.go -destination=./internal/mocks/database/message_repository.go
//

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	domain "reezanvisramportfolio/domain/message"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// InsertMessage mocks base method.
func (m *MockMessageRepository) InsertMessage(ctx context.Context, message domain.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMessage indicates an expected call of InsertMessage.
func (mr *MockMessageRepositoryMockRecorder) InsertMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMessage", reflect.TypeOf((*MockMessageRepository)(nil).InsertMessage), ctx, message)
}
