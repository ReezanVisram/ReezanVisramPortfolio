// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/database/experience_repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/database/experience_repository.go -destination=./internal/mocks/database/experience_repository.go
//

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	domain "reezanvisramportfolio/domain/experience"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExperienceRepository is a mock of ExperienceRepository interface.
type MockExperienceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExperienceRepositoryMockRecorder
}

// MockExperienceRepositoryMockRecorder is the mock recorder for MockExperienceRepository.
type MockExperienceRepositoryMockRecorder struct {
	mock *MockExperienceRepository
}

// NewMockExperienceRepository creates a new mock instance.
func NewMockExperienceRepository(ctrl *gomock.Controller) *MockExperienceRepository {
	mock := &MockExperienceRepository{ctrl: ctrl}
	mock.recorder = &MockExperienceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExperienceRepository) EXPECT() *MockExperienceRepositoryMockRecorder {
	return m.recorder
}

// GetExperience mocks base method.
func (m *MockExperienceRepository) GetExperience(ctx context.Context) ([]domain.Experience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperience", ctx)
	ret0, _ := ret[0].([]domain.Experience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperience indicates an expected call of GetExperience.
func (mr *MockExperienceRepositoryMockRecorder) GetExperience(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperience", reflect.TypeOf((*MockExperienceRepository)(nil).GetExperience), ctx)
}
