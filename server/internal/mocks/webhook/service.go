// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/webhook/service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/webhook/service.go -destination=./internal/mocks/webhook/service.go
//

// Package mock_webhook is a generated GoMock package.
package mock_webhook

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebhookService is a mock of WebhookService interface.
type MockWebhookService struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookServiceMockRecorder
}

// MockWebhookServiceMockRecorder is the mock recorder for MockWebhookService.
type MockWebhookServiceMockRecorder struct {
	mock *MockWebhookService
}

// NewMockWebhookService creates a new mock instance.
func NewMockWebhookService(ctrl *gomock.Controller) *MockWebhookService {
	mock := &MockWebhookService{ctrl: ctrl}
	mock.recorder = &MockWebhookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookService) EXPECT() *MockWebhookServiceMockRecorder {
	return m.recorder
}

// HandleStarWebhookCreated mocks base method.
func (m *MockWebhookService) HandleStarWebhookCreated(ctx context.Context, repoName string, repoId int64, repoDescription, repoLink, repoReleaseLink, repoDefaultBranch string, repoTags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleStarWebhookCreated", ctx, repoName, repoId, repoDescription, repoLink, repoReleaseLink, repoDefaultBranch, repoTags)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleStarWebhookCreated indicates an expected call of HandleStarWebhookCreated.
func (mr *MockWebhookServiceMockRecorder) HandleStarWebhookCreated(ctx, repoName, repoId, repoDescription, repoLink, repoReleaseLink, repoDefaultBranch, repoTags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStarWebhookCreated", reflect.TypeOf((*MockWebhookService)(nil).HandleStarWebhookCreated), ctx, repoName, repoId, repoDescription, repoLink, repoReleaseLink, repoDefaultBranch, repoTags)
}

// HandleStarWebhookDeleted mocks base method.
func (m *MockWebhookService) HandleStarWebhookDeleted(ctx context.Context, repoId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleStarWebhookDeleted", ctx, repoId)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleStarWebhookDeleted indicates an expected call of HandleStarWebhookDeleted.
func (mr *MockWebhookServiceMockRecorder) HandleStarWebhookDeleted(ctx, repoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStarWebhookDeleted", reflect.TypeOf((*MockWebhookService)(nil).HandleStarWebhookDeleted), ctx, repoId)
}
