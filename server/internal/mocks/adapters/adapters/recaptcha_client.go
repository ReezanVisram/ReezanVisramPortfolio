// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/adapters/recaptcha_client.go
//
// Generated by this command:
//
//	mockgen -source=./internal/adapters/recaptcha_client.go -destination=./internal/mocks/adapters/adapters/recaptcha_client.go
//

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRecaptchaClient is a mock of RecaptchaClient interface.
type MockRecaptchaClient struct {
	ctrl     *gomock.Controller
	recorder *MockRecaptchaClientMockRecorder
}

// MockRecaptchaClientMockRecorder is the mock recorder for MockRecaptchaClient.
type MockRecaptchaClientMockRecorder struct {
	mock *MockRecaptchaClient
}

// NewMockRecaptchaClient creates a new mock instance.
func NewMockRecaptchaClient(ctrl *gomock.Controller) *MockRecaptchaClient {
	mock := &MockRecaptchaClient{ctrl: ctrl}
	mock.recorder = &MockRecaptchaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecaptchaClient) EXPECT() *MockRecaptchaClientMockRecorder {
	return m.recorder
}

// VerifyToken mocks base method.
func (m *MockRecaptchaClient) VerifyToken(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockRecaptchaClientMockRecorder) VerifyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockRecaptchaClient)(nil).VerifyToken), ctx, token)
}
