// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/message/service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/message/service.go -destination=./internal/mocks/message/service.go
//

// Package mock_message is a generated GoMock package.
package mock_message

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// HandleMessageCreated mocks base method.
func (m *MockMessageService) HandleMessageCreated(ctx context.Context, name, email, subject, message, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMessageCreated", ctx, name, email, subject, message, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMessageCreated indicates an expected call of HandleMessageCreated.
func (mr *MockMessageServiceMockRecorder) HandleMessageCreated(ctx, name, email, subject, message, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessageCreated", reflect.TypeOf((*MockMessageService)(nil).HandleMessageCreated), ctx, name, email, subject, message, token)
}
